<section>
    <!-- Add Story Button -->
    <button class="add-story-btn" onclick="openModal()">+</button>

    <!-- Story List -->
    <div class="story-list" id="storyList">
        {{#each stories}}
        <div class="story-card"
            onclick="openDetailsModal('{{this._id}}', '{{this.title}}', '{{this.description}}', '{{this.genre}}', '{{this.language}}', '{{this.tags}}', '{{this.date}}')">
            <img src="/images/story-images/{{this._id}}.jpg" alt="{{this.title}}">
            <h3 style="width: 20ch; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">{{this.title}}</h3>
            <p style="width: 20ch; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">{{this.description}}
            </p>
        </div>
        {{/each}}
    </div>

    <!-- Story Details Modal -->
    <div class="story-details-modal" id="storyDetailsModal">
        <div class="story-details-content">
            <img id="detailsThumbnail" src="" alt="Thumbnail">
            <h2 id="detailsTitle"></h2>
            <p id="detailsDescription"></p>
            <p><strong>Genre:</strong> <span id="detailsGenre"></span></p>
            <p><strong>Language:</strong> <span id="detailsLanguage"></span></p>
            <p><strong>Tags:</strong> <span id="detailsTags"></span></p>
            <button id="editButton">Edit</button>
            <button id="deleteButton">Delete</button>
            <button onclick="closeDetailsModal()">Close</button>
        </div>
    </div>

    <!-- Add Story Modal -->
    <div class="modal" id="addStoryModal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Add a Story</h2>
            <form id="storyForm" enctype="multipart/form-data" method="post" action="/admin">
                <input type="text" id="title" name="title" placeholder="Story Title" required>
                <select id="genre" name="genre">
                    <option value="Fantasy">Fantasy</option>
                    <option value="Adventure">Adventure</option>
                    <option value="Sci-Fi">Sci-Fi</option>
                    <option value="Mystery">Mystery</option>
                </select>
                <label for="image">Add Thumbnail</label>
                <input type="file" id="image" name="image" accept=".jpg" required>
                <label for="storyFile">Add The Story (only .txt files allowed)</label>
                <input type="file" id="storyFile" name="storyFile" accept=".txt" required>
                <textarea id="description" name="description" placeholder="Short Description" required></textarea>
                <select id="language" name="language">
                    <option value="English">English</option>
                    <option value="Spanish">Spanish</option>
                    <option value="French">French</option>
                </select>
                <div id="tags"></div>
                <input type="text" id="tagInput" placeholder="Add tags (max 5)">
                <input type="hidden" id="tagsInputHidden" name="tags" value="">
                <input type="datetime-local" id="date" name="date" readonly>
                <button type="submit">Add Story</button>
            </form>
        </div>
    </div>

   <!-- Edit Story Modal -->
<div class="modal" id="editStoryModal">
    <div class="modal-content">
        <span class="close" onclick="closeEditModal()">&times;</span>
        <h2>Edit Story</h2>
        <form id="editStoryForm" enctype="multipart/form-data" method="post" action="/admin/updatestory">
            <input type="text" name="_id" id="_id" hidden>
            <input type="text" id="editTitle" placeholder="Story Title" required name="title">
            <select id="editGenre" name="genre">
                <option value="Fantasy">Fantasy</option>
                <option value="Adventure">Adventure</option>
                <option value="Sci-Fi">Sci-Fi</option>
                <option value="Mystery">Mystery</option>
            </select>
            <label for="editThumbnail">Change Thumbnail</label>
            <!-- Show previous thumbnail here -->
            <div id="thumbnailPreview">
                <img id="currentThumbnail" src="" alt="Current Thumbnail" style="width: 100px; height: 100px;"/>
            </div>
            <input type="file" id="editThumbnail" accept="image/*" onchange="previewThumbnail(event)" name="changedImage" accept=".jpg">
            <textarea id="editDescription" placeholder="Short Description" required name="description"></textarea>
            <select id="editLanguage" name="language">
                <option value="English">English</option>
                <option value="Spanish">Spanish</option>
                <option value="French">French</option>
            </select>
            <input type="text" id="editTagInput" name="tags">
            <button type="submit">Save Changes</button>
        </form>
    </div>
</div>

</section>

<script>
    // Modal Functions
    function openModal() {
        const now = new Date();
        const formattedDate = now.toISOString().slice(0, 16); // YYYY-MM-DDTHH:MM
        document.getElementById('date').value = formattedDate;
        document.getElementById('addStoryModal').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('addStoryModal').style.display = 'none';
    }

    function openDetailsModal(image, name, description, genre, language, tags) {
    // Set the modal content
    document.getElementById('detailsThumbnail').src = '/images/story-images/' + image + '.jpg';
    document.getElementById('detailsTitle').textContent = name;
    document.getElementById('detailsDescription').textContent = description;
    document.getElementById('detailsGenre').textContent = genre;
    document.getElementById('detailsLanguage').textContent = language;
    document.getElementById('detailsTags').textContent = Array.isArray(tags) ? tags.join(', ') : tags; // Ensure tags is an array

    // Assign the image as the story ID
    var storyId = image;
    var storyDetails = [image,name,description,genre,language, Array.isArray(tags) ? tags.join(', ') : tags ]

    // Show the modal
    document.getElementById('storyDetailsModal').style.display = 'flex';

    const deleteButton = document.getElementById('deleteButton');
    //const editButton = document.getElementById('editButton');

    // First, remove the existing event listener to prevent duplicates
    deleteButton.removeEventListener('click', handleDeleteClick);
    editButton.removeEventListener('click', handleEditClick);

    // Add the new event listener for the delete button
    deleteButton.addEventListener('click', function() {
        handleDeleteClick(storyId);  // Pass the storyId to handleDeleteClick
    });
    editButton.addEventListener('click', function(){
        handleEditClick(storyDetails);
    });
}


function handleDeleteClick(storyId) {
    if (confirm('Are you sure you want to delete this story?')) {
        // Send a GET request to the server to delete the story with the given ID
        fetch(`/admin/deletestory/${storyId}`, {
            method: 'GET',
        })
        .then((response) => response.json())
        .then((data) => {
            if (data.message === 'Story deleted successfully') {
              //  alert('Story deleted successfully!');
                location.reload(); // Reload the page to reflect the changes
            } else {
                alert('Failed to delete the story.');
            }
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('Error deleting the story.');
        });
    }
}



    function closeDetailsModal() {
        document.getElementById('storyDetailsModal').style.display = 'none';
    }


    function handleEditClick(storyDetails) {
    // Fill form fields with existing story details
    document.getElementById('_id').value = storyDetails[0];
    document.getElementById('editTitle').value = storyDetails[1]; // Title
    document.getElementById('editDescription').value = storyDetails[2]; // Description
    document.getElementById('editGenre').value = storyDetails[3]; // Genre
    document.getElementById('editLanguage').value = storyDetails[4]; // Language

    // Show the existing thumbnail
    document.getElementById('currentThumbnail').src = '/images/story-images/' + storyDetails[0] + '.jpg'; // Assuming `storyDetails[6]` is the image filename

    // Set the hidden tags input
    document.getElementById('editTagInput').value = storyDetails[5];

    // Close the story details modal and open the edit modal
    document.getElementById('storyDetailsModal').style.display = 'none';
    document.getElementById('editStoryModal').style.display = 'flex';
}

// Function to preview new thumbnail when selected
function previewThumbnail(event) {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = function() {
        const previewImage = document.getElementById('currentThumbnail');
        previewImage.src = reader.result;
    };

    if (file) {
        reader.readAsDataURL(file); // Read the file as a data URL to show the image preview
    }
}

    /*function openEditModal() {
        const storyTitle = document.getElementById('detailsTitle').textContent;
        const story = stories.find(story => story.title === storyTitle);

        if (story) {
            document.getElementById('editTitle').value = story.title;
            document.getElementById('editGenre').value = story.genre;
            document.getElementById('editDescription').value = story.description;
            document.getElementById('editLanguage').value = story.language;

            // Clear existing tags
            const editTagsDiv = document.getElementById('editTags');
            editTagsDiv.innerHTML = '';
            story.tags.forEach(tag => {
                let tagElement = document.createElement('span');
                tagElement.classList.add('tag');
                tagElement.textContent = tag;
                tagElement.onclick = function () {
                    tags = tags.filter(t => t !== tag);
                    tagElement.remove();
                    document.getElementById('editTagsInputHidden').value = tags.join(','); // Update hidden input
                };
                editTagsDiv.appendChild(tagElement);
            });

            document.getElementById('editStoryModal').style.display = 'flex';
        }
    }  */

    function closeEditModal() {
        document.getElementById('editStoryModal').style.display = 'none';
    }

    // Delete Story
    function deleteStory() {
        const title = document.getElementById('detailsTitle').textContent;
        stories = stories.filter(story => story.title !== title);
        renderStories();
        closeDetailsModal();
    }

    // Tag Handling
    const tagsDiv = document.getElementById('tags');
    const tagInput = document.getElementById('tagInput');
    const tagsInputHidden = document.getElementById('tagsInputHidden');
    let tags = [];

    tagInput.addEventListener('keypress', function (event) {
        if (event.key === 'Enter' && tagInput.value.trim() !== '') {
            event.preventDefault();
            if (tags.length < 5) {
                let tagText = tagInput.value.trim();
                if (!tags.includes(tagText)) { // Avoid duplicate tags
                    let tagElement = document.createElement('span');
                    tagElement.classList.add('tag');
                    tagElement.textContent = tagText;
                    tagElement.onclick = function () {
                        tags = tags.filter(t => t !== tagText); // Remove tag from array
                        tagElement.remove(); // Remove tag from DOM
                        tagsInputHidden.value = tags.join(','); // Update hidden input value
                    };
                    tagsDiv.appendChild(tagElement);
                    tags.push(tagText); // Add tag to array
                    tagsInputHidden.value = tags.join(','); // Update hidden input value
                    tagInput.value = ''; // Clear input field
                } else {
                    alert('Tag already exists!');
                }
            } else {
                alert('Maximum of 5 tags allowed!');
            }
        }
    });

    // File Validation
    document.getElementById('image').addEventListener('change', function () {
        const file = this.files[0];
        if (file && !file.type.startsWith('image/jpeg')) {
            alert('Only JPG images are allowed!');
            this.value = ''; // Clear the input
        }
    });

    document.getElementById('storyFile').addEventListener('change', function () {
        const file = this.files[0];
        if (file && file.type !== 'text/plain') {
            alert('Only .txt files are allowed!');
            this.value = ''; // Clear the input
        }
    });

    // Live Content Filtering
    const badWords = ['fuck', 'cunt', 'mother fucker', 'bitch', 'dick'];
    function filterContent(input) {
        badWords.forEach(word => {
            let regex = new RegExp(word, 'gi');
            input.value = input.value.replace(regex, '');
        });
    }
    document.getElementById('title').addEventListener('input', function () {
        filterContent(this);
    });
    document.getElementById('description').addEventListener('input', function () {
        filterContent(this);
    });
</script>

<style>
    .tag {
        display: inline-block;
        background-color: #f1f1f1;
        padding: 5px 10px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        color: #333;
        border: 1px solid #ccc;
    }
    .tag:hover {
        background-color: #ddd;
    }
</style>