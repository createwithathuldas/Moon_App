<section class="password-change-section">
  <div class="section-header">
    <a href="/account" class="back-arrow">
      <i class="fas fa-arrow-left"></i>
    </a>
    <h2>Change Password</h2>
    <p>Secure your account with a new password</p>
  </div>

  <form action="/admin/change-password" method="POST" class="password-form">
  {{#if error}}
    <div class="alert alert-danger">
      <i class="fas fa-exclamation-circle"></i> {{error}}
    </div>
  {{/if}}

  <div class="form-group">
    <label for="currentPassword">Current Password</label>
    <input 
      type="password" 
      id="currentPassword" 
      name="currentPassword" 
      required
      placeholder="Enter your current password"
      value="{{formData.currentPassword}}"
    >
    <i class="fas fa-lock input-icon"></i>
  </div>

  <div class="form-group">
    <label for="newPassword">New Password</label>
    <input 
      type="password" 
      id="newPassword" 
      name="newPassword" 
      required
      minlength="8"
      placeholder="Enter a new password (min 8 characters)"
      value="{{formData.newPassword}}"
    >
    <i class="fas fa-key input-icon"></i>
  </div>

  <div class="form-group">
    <label for="confirmPassword">Confirm New Password</label>
    <input 
      type="password" 
      id="confirmPassword" 
      name="confirmPassword" 
      required
      placeholder="Re-enter your new password"
      value="{{formData.confirmPassword}}"
    >
    <i class="fas fa-key input-icon"></i>
  </div>

  <div class="form-actions">
    <button type="submit" class="submit-btn">
      <i class="fas fa-save"></i> Update Password
    </button>
    <a href="/admin/account" class="cancel-btn">
      <i class="fas fa-times"></i> Cancel
    </a>
  </div>
</form>
</section>

<style>
    .alert {
    padding: 12px 16px;
    margin-bottom: 20px;
    border-radius: 4px;
    font-size: 0.95rem;
  }

  .alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .alert-danger i {
    font-size: 1.1rem;
  }

  /* Keep your existing styles */
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .password-change-section {
    max-width: 600px;
    margin: 2rem auto;
    padding: 2rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .section-header {
    position: relative;
    padding-left: 2rem;
    margin-bottom: 2rem;
  }

  .back-arrow {
    position: absolute;
    left: 0;
    top: 0.5rem;
    color: #4a6fa5;
    font-size: 1.5rem;
    text-decoration: none;
    transition: color 0.3s;
  }

  .back-arrow:hover {
    color: #3a5a80;
  }

  .section-header h2 {
    color: #333;
    margin-bottom: 0.5rem;
  }

  .section-header p {
    color: #666;
    font-size: 1.1rem;
  }

  .password-form {
    margin-top: 2rem;
  }

  .form-group {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: #555;
  }

  .form-group input {
    width: 100%;
    padding: 0.8rem 1rem 0.8rem 2.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.3s;
  }

  .form-group input:focus {
    outline: none;
    border-color: #4a6fa5;
    box-shadow: 0 0 0 2px rgba(74, 111, 165, 0.2);
  }

  .input-icon {
    position: absolute;
    left: 1rem;
    top: 2.5rem;
    color: #777;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
  }

  .submit-btn {
    padding: 0.8rem 1.5rem;
    background: #4a6fa5;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background 0.3s;
  }

  .submit-btn:hover {
    background: #3a5a80;
  }

  .cancel-btn {
    padding: 0.8rem 1.5rem;
    background: #f0f0f0;
    color: #333;
    text-decoration: none;
    border-radius: 4px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background 0.3s;
  }

  .cancel-btn:hover {
    background: #e0e0e0;
  }
  .error-message {
    color: #dc3545;
    font-size: 0.85rem;
    margin-top: 0.25rem;
    height: 1rem;
  }

  .password-strength {
    margin-top: 0.5rem;
  }

  .strength-meter {
    display: inline-block;
    height: 5px;
    width: 100px;
    background: #e0e0e0;
    border-radius: 3px;
    overflow: hidden;
  }

  .strength-meter::after {
    content: '';
    display: block;
    height: 100%;
    width: 0;
    background: transparent;
    transition: width 0.3s, background 0.3s;
  }

  .strength-text {
    font-size: 0.85rem;
    margin-left: 0.5rem;
    color: #666;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('changePasswordForm');
    const currentPassword = document.getElementById('currentPassword');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    const strengthMeter = document.getElementById('strengthMeter');
    const strengthText = document.getElementById('strengthText');

    // Password strength indicator
    newPassword.addEventListener('input', function() {
      const strength = checkPasswordStrength(this.value);
      updateStrengthIndicator(strength);
    });

    // Form submission validation
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      // Reset previous errors
      clearErrors();
      
      let isValid = true;

      // Validate current password
      if (currentPassword.value.trim() === '') {
        showError('currentPasswordError', 'Current password is required');
        isValid = false;
      }

      // Validate new password
      if (newPassword.value.trim() === '') {
        showError('newPasswordError', 'New password is required');
        isValid = false;
      } else if (newPassword.value.length < 8) {
        showError('newPasswordError', 'Password must be at least 8 characters');
        isValid = false;
      }

      // Validate password confirmation
      if (confirmPassword.value.trim() === '') {
        showError('confirmPasswordError', 'Please confirm your new password');
        isValid = false;
      } else if (confirmPassword.value !== newPassword.value) {
        showError('confirmPasswordError', 'Passwords do not match');
        isValid = false;
      }

      if (isValid) {
        form.submit();
      }
    });

    function showError(elementId, message) {
      const element = document.getElementById(elementId);
      element.textContent = message;
    }

    function clearErrors() {
      const errors = document.querySelectorAll('.error-message');
      errors.forEach(error => error.textContent = '');
    }

    function checkPasswordStrength(password) {
      // Initialize strength
      let strength = 0;
      
      // Length check
      if (password.length >= 8) strength++;
      if (password.length >= 12) strength++;
      
      // Character variety checks
      if (/[A-Z]/.test(password)) strength++; // Uppercase letter
      if (/[a-z]/.test(password)) strength++; // Lowercase letter
      if (/[0-9]/.test(password)) strength++; // Number
      if (/[^A-Za-z0-9]/.test(password)) strength++; // Special character
      
      // Cap at 5 for our meter
      return Math.min(strength, 5);
    }

    function updateStrengthIndicator(strength) {
      const meter = strengthMeter;
      const text = strengthText;
      const colors = ['#dc3545', '#fd7e14', '#ffc107', '#28a745', '#006400'];
      const labels = ['Very Weak', 'Weak', 'Moderate', 'Strong', 'Very Strong'];
      
      // Update meter
      meter.style.width = (strength * 20) + '%';
      meter.style.backgroundColor = colors[strength - 1] || '#e0e0e0';
      
      // Update text
      text.textContent = strength > 0 ? labels[strength - 1] : '';
      text.style.color = colors[strength - 1] || '#666';
    }
  });
</script>