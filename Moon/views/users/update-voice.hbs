  <style>
    .coverConatiner {
      font-family: Arial, sans-serif;
      background-color: #f4f4f400;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    .container {
      background-color: rgb(255, 255, 255);
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 700px;
      text-align: center;
    }

    h1 {
      color: #5900ff;
      font-family: 'Fredoka One', cursive;
    }

    .btn-record {
      background-color: #ffffff;
      color: white;
      border: none;
      padding: 0px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .btn-record:active {
      background-color: #ffffff;
    }

    .btn-record.stop {
      background-color: #ffffff;
    }

    .btn-record.stop:active {
      background-color: #ffffff;
    }

    audio {
      width: 100%;
      margin-top: 20px;
    }

    .form-container {
      margin-top: 20px;
    }

    label {
      font-size: 16px;
      display: block;
      margin-bottom: 8px;
    }

    input[type="submit"] {
      background-color: #007BFF;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 5px;
      width: 100%;
      transition: background-color 0.3s;
    }

    input[type="submit"]:hover {
      background-color: #0056b3;
    }
    .paragraph{
      width: 98%;
      height: auto;
      color: #b30cc9;
      font-size: 16px;
      margin: 0 auto;
      margin-bottom: 10px;
      padding: 10px;
      overflow-y: scroll;
      font-family: 'Fredoka One', cursive;
    }
    .notice{
      width: 90%;
      height: auto;
      color: #696969;
      border: solid 1px #818181 ;
      border-radius: 10px;
      font-size: 14px;
      padding: 0;
      margin: 0;
      font-style: italic;
    }
    /* From Uiverse.io by sahilxkhadka */ 
.switch {
  position: relative;
  width: 68px;
  height: 68px;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgb(118, 188, 240);
  color: #fff;
  border-radius: 50%;
  cursor: pointer;
  transition: all .3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.mic-on, .mic-off {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all .3s ease-in-out;
}

.mic-on {
  z-index: 4;
}

.mic-off {
  position: absolute;
  inset: 0;
  z-index: 5;
  opacity: 0;
}

.switch:hover {
  background-color: rgba(63, 141, 201, 0.8);
}

#checkbox {
  display: none;
}

#checkbox:checked + .switch {
  background-color: rgb(233, 104, 104)
}

#checkbox:checked + .switch .mic-off {
  opacity: 1;
}

#checkbox:active + .switch {
  scale: 1.2;
}
#simplenotice{
  color: rgb(212, 79, 79);
  font-style: italic;
  font-size: 14px;
}
  </style>
<div class="coverConatiner">
  <div class="container">
    <h1>UPDATE WITH YOUR NEW VOICE</h1>

    <div class="notice"><p>Click the record button, read the story below, and verify your voice is clear to complete registration.</p></div>
    <div class="paragraph">
      <p>One day, a tiny cat named Whiskers decided to race a rabbit. The rabbit hopped fast, but Whiskers was quick too, darting through the bushes and under a big rock. Suddenly, they both tripped over a small log and tumbled into a pile of leaves! ‘Ouch!’ said the rabbit, while Whiskers just laughed and purred. They both agreed that racing was fun, but next time, they’d watch out for logs!</p>
    </div>

    <!-- Button to toggle voice recording -->
    <button id="recordButton" class="btn-record">
    <input type="checkbox" id="checkbox">
    <label class="switch" for="checkbox">
      <div class="mic-on">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-mic-fill" viewBox="0 0 16 16"> <path d="M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z"></path> <path d="M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z"></path> </svg>
      </div>
      <div class="mic-off">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-mic-mute-fill" viewBox="0 0 16 16"> <path d="M13 8c0 .564-.094 1.107-.266 1.613l-.814-.814A4.02 4.02 0 0 0 12 8V7a.5.5 0 0 1 1 0v1zm-5 4c.818 0 1.578-.245 2.212-.667l.718.719a4.973 4.973 0 0 1-2.43.923V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 1 0v1a4 4 0 0 0 4 4zm3-9v4.879L5.158 2.037A3.001 3.001 0 0 1 11 3z"></path> <path d="M9.486 10.607 5 6.12V8a3 3 0 0 0 4.486 2.607zm-7.84-9.253 12 12 .708-.708-12-12-.708.708z"></path> </svg>
      </div>
    </label> 
    <p id="simplenotice"></p></button>
    
    <!-- Audio element to play the recorded voice -->
    <audio id="audioPlayer" controls style="display: none;"></audio>

    <!-- Form to submit the recorded voice -->
    <div class="form-container">
      <form id="voiceForm" method="POST" action="/update-voice" enctype="multipart/form-data">
        <label for="voiceFile">Voice Recording</label>
        <input type="file" id="voiceFile" name="voiceFile" accept="audio/*" disabled hidden required/>
        <input type="submit" value="Submit Voice" />
      </form>
    </div>
  </div>
  </div>

  <script>
    let mediaRecorder;
    let audioChunks = [];
    const recordButton = document.getElementById('recordButton');
    const audioPlayer = document.getElementById('audioPlayer');
    const voiceFileInput = document.getElementById('voiceFile');
    let isRecording = false;

    // Check for browser support for audio recording
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      console.log('Audio recording is supported!');
    } else {
      alert('Audio recording is not supported in your browser.');
    }

    // Start/Stop recording on button click
    recordButton.addEventListener('click', async () => {
      if (!isRecording) {
        // Start recording
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = event => {
          audioChunks.push(event.data);
        };

        mediaRecorder.onstop = () => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          const audioUrl = URL.createObjectURL(audioBlob);
          audioPlayer.src = audioUrl;
          audioPlayer.style.display = 'block';
          voiceFileInput.disabled = false;

          // Create a downloadable file for the form submission
          const file = new File([audioBlob], 'voice_recording.wav', { type: 'audio/wav' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          voiceFileInput.files = dataTransfer.files;
        };

        mediaRecorder.start();
        //recordButton.textContent = 'Stop Recording';
        recordButton.classList.add('stop');
        isRecording = true;
      } else {
        // Stop recording
        mediaRecorder.stop();
        recordButton.classList.remove('stop');
        isRecording = false;
      }
    });
  </script>
